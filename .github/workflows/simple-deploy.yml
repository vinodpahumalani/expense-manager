name: Simple EC2 Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          JWT_SECRET: test-jwt-secret-for-ci-environment
          DATABASE_PATH: ./data/test_expense_tracker.db
          NODE_ENV: test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            # Navigate to application directory
            cd /var/www/expense-management || {
              echo "Creating application directory..."
              sudo mkdir -p /var/www/expense-management
              sudo chown $USER:$USER /var/www/expense-management
              cd /var/www/expense-management
            }

            # Clone or pull latest code
            if [ -d ".git" ]; then
              echo "Pulling latest changes..."
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # Install dependencies and build
            echo "Installing dependencies..."
            npm ci

            echo "Building application..."
            npm run build

            # Stop existing application
            pm2 stop expense-management || echo "No existing app to stop"
            pm2 delete expense-management || echo "No existing app to delete"

            # Start application
            echo "Starting application..."
            pm2 start npm --name "expense-management" -- start
            pm2 save

            echo "Deployment completed successfully!"
